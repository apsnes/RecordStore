@rendermode InteractiveServer
@page "/records/update/{RecordId:int}"

<div class="is-flex is-justify-content-center is-align-items-center">
    <div class="has-text-success-light box is-flex is-flex-direction-column is-align-items-center">
        <InputText @bind-Value="recordWithNewDetails.Title" class="input has-text-success-light m-1" placeholder="Title" />
        <InputText @bind-Value="recordWithNewDetails.Artist" class="input has-text-success-light m-1" placeholder="Artist" />
        <InputText @bind-Value="recordWithNewDetails.Genre" class="input has-text-success-light m-1" placeholder="Genre" />
        <InputText @bind-Value="recordWithNewDetails.SpotifyEmbed" class="input has-text-success-light m-1" placeholder="Spotify Embed Link" />
        <InputNumber @bind-Value="recordWithNewDetails.ArtistId" class="input has-text-success-light m-1" placeholder="Artist ID" />
        <InputNumber @bind-Value="recordWithNewDetails.ReleaseYear" class="input has-text-success-light m-1" placeholder="Release Year" />
        <button class="button is-primary has-text-success-light has-background-grey-dark mt-2 ml-1" @onclick="() => UpdateCurrentRecord()">Update Record</button>
    </div>
</div>

<p class="has-text-grey-dark">@FormStatus</p>

@code
{
    [Parameter] public int RecordId { get; set; }
    public Record recordWithNewDetails = new();
    public string FormStatus = string.Empty;

    private async Task UpdateCurrentRecord()
    {
        using (HttpClient client = new())
        {
            recordWithNewDetails.Id = RecordId;
            var response = await client.PutAsJsonAsync($"https://localhost:7244/api/record", recordWithNewDetails);
            if (response == null || !response.IsSuccessStatusCode)
            {
                FormStatus = $"Unable to update record details. Please try again. {response.StatusCode}";
            }
            else
            {
                FormStatus = $"Record {RecordId} successfully updated!";
            }
        }
    }
}
